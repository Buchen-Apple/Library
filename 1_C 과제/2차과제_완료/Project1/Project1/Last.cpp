#include <stdio.h>
#include <windows.h>

#define HEIGHT_LEN 11
#define WIDTH_LEN 30

void Print(char[][WIDTH_LEN]);
void UpFunc(char[][WIDTH_LEN], int, int);
void DownFunc(char[][WIDTH_LEN], int, int);
void LeftFunc(char[][WIDTH_LEN], int, int);
void RightFunc(char[][WIDTH_LEN], int, int);
void Change(char cBuffer[][WIDTH_LEN], int, int);

int main()
{

	char cOriginal[HEIGHT_LEN][WIDTH_LEN] =
	{
	{ '0', '0', '0', '0', '0', '0', '0', '0','0','0','0','0','0','0','0','0' ,'0' ,' ' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' },
	{ '0', '0', '0', '0', '0', '0', '0', '0','0','0',' ','0','0','0','0','0' ,'0' ,' ' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' },
	{ '0', '0', '0', '0', '0', '0', '0', '0','0','0','0','0','0','0','0','0' ,'0' ,' ' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' },
	{ '0', '0', '0', '0', '0', '0', '0', '0','0','0','0','0','0','0','0','0' ,'0' ,' ' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' },
	{ '0', '0', '0', ' ', '0', '0', ' ', '0','0','0',' ','0','0','0','0',' ' ,'0' ,' ' ,'0' ,'0' ,' ' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,' ' ,'0' ,'0' },
	{ '0', ' ', '0', ' ', '0', '0', ' ', '0','0','0',' ','0','0','0','0',' ' ,'0' ,'0' ,'0' ,'0' ,' ' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,' ' ,'0' ,'0' },
	{ '0', '0', '0', ' ', '0', '0', ' ', '0','0','0',' ','0','0','0','0',' ' ,'0' ,' ' ,'0' ,'0' ,' ' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,' ' ,'0' ,'0' },
	{ '0', '0', '0', '0', '0', '0', '0', '0','0','0','0','0','0','0','0','0' ,'0' ,' ' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' },
	{ '0', '0', '0', '0', '0', '0', '0', '0','0','0','0','0','0','0','0','0' ,'0' ,' ' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' },
	{ '0', '0', '0', '0', '0', '0', '0', ' ','0','0',' ','0','0','0','0','0' ,'0' ,' ' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' },
	{ '0', '0', '0', '0', '0', '0', '0', '0','0','0','0','0','0','0','0','0' ,'0' ,' ' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' },

	};

	char cBuffer[HEIGHT_LEN][WIDTH_LEN];

	int i;
	int j;

	while (1)
	{

		for (i = 0; i < HEIGHT_LEN; ++i)
		{
			for (j = 0; j < WIDTH_LEN; ++j)
			{
				cBuffer[i][j] = cOriginal[i][j];
			}
		}

		Print(cBuffer);
		Sleep(1000);

		Change(cBuffer, 10, 3);
		Sleep(1000);

	}

	return 0;
}

void Print(char cBuffer[][WIDTH_LEN])
{
	int i;
	int j;
	system("cls");

	for (i = 0; i < HEIGHT_LEN; ++i)
	{
		for (j = 0; j < WIDTH_LEN; ++j)
		{
			printf("%c", cBuffer[i][j]);
		}
		fputs("\n", stdout);
	}
	Sleep(2);
}

void Change(char cBuffer[][WIDTH_LEN], int i, int j)
{
	// 벽 체크 조건
	if (cBuffer[i][j] == '*' || cBuffer[i][j] == ' ')
		return;

	// 위 리턴조건
	if (i < 0 )
		return;

	// 우측 리턴 조건
	if (j >= WIDTH_LEN)
		return;

	// 좌측 리턴 조건
	if (j < 0)
		return;
	
	//아래 리턴 조건
	if (i >= HEIGHT_LEN)
		return;	


	cBuffer[i][j] = '*';

	Print(cBuffer);

	Change(cBuffer, i - 1, j);	//상
	Change(cBuffer, i, j - 1);  //좌

	Change(cBuffer, i + 1, j);	//하
	Change(cBuffer, i, j + 1);	//우


}
가상 메모리란?
- 프로세스마다 가상 주소를 할당해, 물리 메모리의 제약을 벗어나기 위한 기법입니다.
- 모든 메모리를 페이지 단위로 분할했으며, 요구 페이징 기법으로 작동합니다. 이로인해 모든 프로세스의 페이지가 물리메모리에 올라올 필요가 없어졌습니다.
- CPU와 프로그래머는 가상 주소로 접근하며, 이를 실제 물리메모리로 변경하는 것은 MMU가 해줍니다.
- MMU는 물리메모리에 있는 페이지 테이블을 이용해 가상 메모리와 물리 메모리를 맵핑하는데, 이 테이블은 커널 영역 메모리에 존재합니다.

인터럽트와 트랩
- 인터럽트는 하드웨어의 신호입니다. 예를 들어 I/O등이 완료되었을 시 인터럽트를 통해 CPU에게 신호를 줍니다.
- 트랩은 소프트 웨어의 신호입니다. 예를 들어 0으로 나누거나 페이지 폴트 등이 발생하면 트랩이 발생합니다.

메모리 계층이란?
- 레지스터/캐시/물리메모리/하드디스크를 의미합니다.
- 각 계층마다 데이터를 주고받는 블럭이 존재합니다.
- 프로그램의 지역적 특성때문에 캐시히트가 발생할 확률이 높기 때문에 메모리 계층은 의미가 있습니다.

스케쥴링 알고리즘에 대해 적어보시오
- 기본적으로 OS는 선점형 OS와 비선점형 OS로 나뉘어집니다.
- 선점형 OS : 우선순위가 높은 스레드가 Ready에 등장할 시 기존에 Running 중인 스레드의 우선순위보다 높다면 cpu 자원을 내주는 방법.
- 비선점형 OS : 우선순위가 높은 스레드가 등장해도 CPU를 점유한 자기 자신이 점유권을 포기하지 않는 이상 다른 스레드는 절대 CPU 자원을 받을 수 없다.
- 그리고 선점형 OS는 라운드 로빈 알고리즘과 우선순위 알고리즘, 그리고 타임슬라이스를 이용해 스케줄링을 진행합니다.

LRU(Least Recently Used)와 LFU(Least frequently used)
- 캐시와 물리메모리에서 희생메모리를 선택할 때 사용하는 방법입니다.
- LRU는 캐시에 올라온지 가장 오래된 메모리를 밀어내는 방법입니다.
- 단점은, 이 오래된 메모리가 곧 사용될 예정일 경우 곧바로 다시 올라와야하기 때문에 합리적이지 않습니다.
- LFU는 가장 적게 사용된 메모리를 밀어내는 방법입니다.
- 단점은, 이 적게 사용된 메모리가 앞으로 쭉 사용될 예정일 경우 곧바로 다시 올라와야하기 때문에 합리적이지 않습니다.
- 각자 장단점이 있습니다.

멀티레벨 피드백 큐(다단계 피드백 큐)
- 선점형 OS가 기본적으로 사용하는 스케쥴링 방법입니다.
- 라운드로빈/우선순위 알고리즘을 사용합니다.
- 이 경우 기아현상이 발생할 수 있는데 이를 해소하기 위한 방법 중 하나가 에이징 기법입니다.

에이징 기법
- 에이징 기법은 우선순위가 낮은 스레드의 우선순위를 점진적으로 늘려 언젠가는 실행되도록 하는 방법입니다.

IOCP란 무엇이고 장점 적어보시오
- 비동기 입출력을 제공하며, 입출력 결과와 결과 처리 스레드를 가지고 있는 구조.
- 합리적인 스레드 풀링 : 기존 컨커런트 모델은 연결 1개당 스레드 1개를 제작. IOCP는 지정한 수 만큼의 스레드를 만들어 많은 연결을 처리. 컨커런트 모델에 비해 스레드 수가 적으므로 컨텍스트 스위칭 부담이 적다.
- wait thread queue는 스택 구조로 관리 : 캐시히트 가능성 증가, 기존에 사용했던 페이지가 물리메모리에 존재할 가능성.

Overlapped I/O 구조의 특징
- 기존의 일반 구조는 I/O요청 후 결과가 나올때까지 사용자는 아무것도 할 수 없는 상황. 
- 오버랩 구조는 I/O를 커널이 처리해주기 때문에 I/O요청 후 사용자는 다른일을 할 수 있다.

actor패턴
- reactor와 proactor가 존재합니다.
- reactor : 이벤트를 등록해두고 이벤트가 가능한 상태인지를 확인합니다.
- proactor : 작업을 등록해두고 작업이 완료될 시 통지를 받음.

스핀락의 장점
- 커널모드로의 전환이 발생하지 않습니다. 임계영역에 점유하고있는 스레드가 빠른시간 안에 작업을 끝낼 가능성이 있다면 스핀을 돌면서 기다리는게 block이 되지 않고 빠릅니다.
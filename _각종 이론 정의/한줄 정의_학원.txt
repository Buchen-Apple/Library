직렬화 버퍼
- 패킷을 Send/Recv하는 바이트 버퍼
- 장점 : 유연성 (구조체를 패킷으로 사용할 경우, 새로운 패킷을 추가할 때 마다 매번 구조체가 추가되어야 함)
- 단점 : 마샬링 등 함수 콜이 들어가기 때문에 느리다.

DB Connect의 TLS 제작 이유
- Worker 스레드가 패킷을 처리할 경우, 워커 스레드 자체에서 DB에 Connect 하는 상황 발생
- 때문에 네트워크 모듈의 멤버로 커넥트를 가지고 있거나 해야하는데, 그건 네트워크 영역이 아님
- 그래서 컨텐츠 파트에 TLS를 만들고 워커스레드가 접근하게 함

스핀락의 장점
- 커널 모드로의 전환이 없음.
- 인터락 함수는 커널모드 전환 없음. 
- 예를 들어, InterlockedIncrement 함수는 단순히 inc라는 하드웨어 영역의 명령어임. 커널모드 전환 아님.

스핀락의 단점
- 대신 CPU를 많이 사용

shutdown을 사용하는 이유
- 소켓 재사용 가능성 방지
: 아직 모든 I/O가 종료되지 않았는데 closesocket을 해버리면 새로운 유저가 해당 소켓을 사용할 수 있음
: closesocket을 하면 세션을 재사용 할 수 있기 때문에 응용 버퍼나 overlapped 구조체가 변조될 수 있음. 아직 I/O를 하는중이었으면 문제 발생 가능성.

shutdown 문제점
- TIME_WAIT이 무조건 남는다(셧다운은 so_linger 적용 안됨)
- FIN에 대한 ACK가 안오는 상황 발생 --> so_linger후 cancelIOEx를 한다.

스마트포인터
- 사용자로 하여금 삭제를 신경쓰지 않도록 함.
- 장점 : 편리하다
- 단점 : 생성자/연산자오버로딩/소멸자 등 함수 call이 많다. / 카운트 인터락으로 인해 속도가 느리다.

매치메이킹 서버 분산 이유
- 클라이언트에게 빠른 응답성을 주기 위함.

네트워크 구성 요소
- 컴퓨터(PC, 서버) , 네트워크 장비(라우터/스위치) , 전송 매체(선)

LAN이란?
- 좁은 범위의 네트워크
- 사용자가 직접 관리 / 통신 요금 없음.

이더넷이란?
- LAN 통신을 위한 통신 프로토콜.

인터넷이란?
- ISP가 서로 연결된 네트워크.
- ISP는 Internet Service Provider의 약자.

인터넷에 연결하기 위한 회선
- 엑세스 회선. 결국 ISP에 연결하는 것.

베스트 에포트 형의 서비스
- 인터넷 서비스와 속도를 가능한 제공하지만, 제공 못해도 양해 부탁드립니다. 라는 의미
- 일반 브로드밴드 서비스는 모두 이것.

WAN이란?
- 거점 간 네트워크

인터넷과 WAN의 차이점
- 네트워크 관리자 : 인터넷은 ISP가 각각 분담해서 관리 / WAN은 전기통신사업자가 모두 관리.
- 통신 상대 : 인터넷에 접속한 모든 유저와 통신. / WAN은 사내 컴퓨터 한정
- 둘 다 통신요금이 나오는건 똑같음.

데이터를 주고받는 주체
- PC등에서 동작하는 어플리케이션

네트워크 아키텍쳐
- 통신을 하기 위한 프로토콜의 조합.
- OSI 7계층, TCP,IP 4계층 등..

네트워크 아키텍쳐의 역활
- 어플리케이션끼리 데이터를 주고받을 수 있게 한다.

네트워크 아키텍쳐가 필요한 이유
- 통신 프로토콜 하나 모든 기능을 넣을 경우 :  프로토콜이 복잡해지고 확장성 낮아짐.

TCP/IP란?
- 네트워크 아키텍쳐의 하나. 좀 더 단순화 한 것.
- 응용 / 전송 / 인터넷 / 네트워크 인터페이스 <<로 나눠진다
- 순서대로 HTTP 프로토콜 / TCP, UDP / IP, ARP / 이더넷 프로토콜을 사용한다.

TCP/IP의 네트워크 인터페이스 계층 역활
- 이더넷 프로토콜을 이용해 같은 네트워크 내부 끼리 데이터 전송.

TCP/IP의 인터넷 계층 역활
- IP/ARP 프로토콜을 이용해 어플리케이션을 실행하는 컴퓨터끼리의 데이터 전송.

TCP/IP의 전송 계층 역활
- TCP/UDP를 이용해 컴퓨터 내부의 어플리케이션에게 데이터 전송.

TCP/IP의 응용 계층 역활
- 전달받은 데이터를 실제로 처리한다.

IP주소란?
- 각 통신 장치에, 부여되는 주소. Ipv4와 Ipv6가 존재한다.
- 사설 IP와 공인 IP로 나뉜다.

공인 IP
- 인터넷 상에 중복되지 않는 IP 주소
- 실제 인터넷 통신에 사용

사설 IP
- 내부 네트워크에서만 사용되는 IP 주소
- 공인 IP 주소 고갈에 대한 대책

IP주소 구성
- 네트워크 ID + 호스트 ID
- 네트워크 ID : 네트워크를 식별 (서울시)
- 호스트 ID : 네트워크 내부의 호스트를 식별. (10번지)

IP 주소의 클래스
- 네트워크 ID와 호스트 ID의 경계를 나눈 개념.
- A 클래스 : 앞에 8비트를 네트워크 ID로 사용 / 맨 앞 비트패턴 0
- B 클래스 : 앞 16비트를 네트워크 ID로 / 맨 앞 비트패턴 10
- C 클래스 : 앞에 24비트를 네트워크 ID로 / 맨 앞 비트패턴 110

사용할 수 없는 IP 주소
- 호스트 ID의 비트가 모두 0 : 네트워크 주소 (192.168.1.0)
- 호스트 ID의 비트가 모두 1 : 브로드캐스트 주소 (192.168.1.255)

클래스풀 IP 주소의 단점
- 주소 낭비가 심하다. 예를들어 A 클래스는 네트워크 1개가 1600만개의 호스트.
- 그래서 클래스리스 구조로 갈 필요가 있다. 

클래스리스 구조
- 네트워크 ID와 호스트 ID를 유연하게 지정할 수 있는 방법.
- 핵심은 서브넷 마스크

서브넷 마스크란
- 네트워크 ID와 호스터 ID를 유연하게 구분하는 방법. 클래스에 종속적이지 않음.
- 클래스리스 구조를 위한 방법.
- 비트가 1인부분이 네트워크 ID / 0인 부분이 호스트 ID로 사용된다.

서브넷 마스크 계산법
- 기존 주소와 서브넷 마스크를 비트 AND 연산
- 출발지와 목적지가 같으면 내부 네트워크. 다르면 외부 네트워크.

192.168.0.100, 192.168.0.200에 서브넷 마스크는 192.168.0.0/24 ((255.255.255.0)
- 앞에 192.168.0이 같기때문에 같은 네트워크로 취급된다.

위 동일에 서브넷 마스크는 192.168.0.0/25 ((255.255.255.128)
- 192.168.0.1~126 이것과 192.168.0.129~254로 네트워크가 나눠지기 때문에 서로 다른 네트워크로 취급
- 각각 첫번째와 마지막은 네트워크주소/브로드캐스트 주소로 사용되기 때문에 -2 함.

NAT(Network Address Tranlation)
- 사설 IP주소와 공인 IP주소를 변환하는 기술
- 라우터나 방화벽 상에서 주로 이루어진다. (장비가 한다)
- NAT 테이블을 이용한 변환.

NAT 테이블
- 사설 IP 주소와 공인 IP주소를 저장하는 테이블
- 최초에 정보가 저장되는 시점은 [내부에서 패킷이 나갈때] 이다.
- 때문에, 외부에서 내부로 들어오는 통신은 기본적으로 막혀있으며, 돌려받는 패킷만 들어올 수 있다.

외부에서 내부로 데이터가 왔는데 NAT 테이블에 정보가 없으면?
- 파기해 버린다.

NAT의 장점
- 보안 강화 : 내부망 / 외부망 단절로 보안 강화
- IP주소 고갈 방지 : 내부 호스트들이 1개의 공인 IP 사용

NAT의 한계
- 공인 IP 1개와 내부 IP 1개를 맵핑. 때문에 한 번에 1개의 호스트만 통신 가능
- 192.168.10.2와 192.168.10.3이 동시에 같은 외부망 주소로 접속하면, NAT 테이블에는
- 192.168.10.2 <--> 1.1.1.1 / 192.168.10.3 <--> 1.1.1.1 이렇게 2개가 저장된다. 
- 그럼 외부에서 1.1.1.1로 들어왔을때 10.2으로 가야하는지 10.3으로 가야하는지 모른다.

NAPT(Network Address Port Translation)
- NAT의 확장 기능
- 사설 IP뿐만 아니라 Port까지 바꿔서 보낸다.
- 기존의 NAT : 192.168.10.119 <--> 1.1.1.1
- NAPT : 192.168.10.119 : 8000 <--> 1.1.1.1:8000

NAPT 시, 만약 사설의 PORT가 똑같다면?
- 192.168.10.119 : 8000 <--> 1.1.1.1:8000
- 192.168.10.110 : 8000 <--> 1.1.1.1:8001
- 이처럼 라우터의 포트 번호를 바꿔서 보내고, 1.1.1.1:8001로 들어온 데이터는 192.168.10.110 : 8000로 보내준다.
- 1.1.1.1:8000로 오면 192.168.10.119 : 8000 로 보내준다.

DNS란?(Domain Name System)
- 호스트 명, IP주소를 매핑해주는 시스템.
- 사람이 IP를 기억하기 힘들기 때문에.
- 과거에는 hosts 파일로 관리했으나, 이제는 따로 DNS 서버를 두고 관리.

존
- DNS 서버가 관리하는 범위.

리졸버
- DNS 서버에 이름해석을 위해 (도메인을 IP로 해석하는 절차) 질의를 보내는 클라이언트. 즉, PC

DNS 캐시
- 리졸버나 DNS 서버는 질의 결과를 일정시간 캐싱한다. 이를 DNS 캐시라 한다.

리졸버의 DNS 캐시 확인 명령어
- cmd의 ipconfig/displaydns 

홈 네트워크의 DNS 서버
- Local DNS라고 하며, 보통 ISP의 DNS서버.

nslookup 명령어
- DNS서버에 IP주소를 수동으로 질의하는 명령어.
- DNS서버에 오류가 발생하는 등의 상황에 사용

DNS를 이용한 부하분산
- DNS서버의 존파일에, 뒤에 있는 서버 A/B/C를 등록해두고, 해당 DNS서버로 질의하는 리졸버에게 A/B/C를 라운드 로빈으로 분산해주는 방법.

DNS를 이용한 부하분산의 장점
- 전용 장비가 필요 없다.

DNS 부하분산의 단점
- 라운드 로빈 알고리즘으로 인한 한계(효율적 분산 불가능)
- 서부 다운 감지 불가. 때문에, 이미 다운된 서버의 IP도 계속 반환한다.
- 이를 막기위해 L4 로드밸런서 같은 장비가 사용된다.

동적 DNS
- IP주소가 변경되었을 때 DNS 서버에 이를 알려, 호스트 명과 IP주소를 동적으로 갱신

포트 번호란?
- 호스트 내부의 어플리케이션을 식별하는 식별자.
- 1개의 어플리케이션이 2개의 포트를 열 수도 있다.
- 잘 알려진 포트 / 등록된 포트 / 동적포트로 나눠진다.

TCP란?
- 어플리케이션 데이터를 전달하기 위해 사용되는 프로토콜

슬라이딩 윈도우 사용 이유
- 한번 데이터를 보낸 후, 그 데이터가 올때까지 응답만 기다리면 비효율적
- 때문에, 상대의 윈도우 사이즈를 보고, 송신쪽에서 데이터를 한번에 보낼 수 있다.

TCP와 UDP의 차이점
- TCP는 연결형 / UDP는 비연결형
- TCP는 신뢰있는 전송 / UDP는 신뢰 없는 전송
- TCP는 오버헤드 큼 / UDP는 오버헤드 작다.
- TCP는 1:1통신 / UDP는 1:1, 1:n 통신 둘다 제공
- TCP는 데이터 경계 없음 / UDP는 데이터 경계 있음
- TCP는 오류,혼잡,흐름제어 / UDP는 없음

포트포워딩이란?
- 인터넷쪽에서, 먼저 통신을 시작해 홈 네트워크 내부의 특정 호스트에게 패킷을 보낼 수 있게 하는 것.
- Nat 테이블과는 다른, 포트포워딩 테이블에 추가된다.
- 내가 추가해야 한다.

기본 게이트웨이
- 다른 네트워크로 가는 입구. 보통 브로드밴드 라우터
- 다른 네트워크에 데이터를 송신할 때, 일단 라우터에 전송한다.

기본 게이트웨이가 잘못되면?
- 외부 네트워크와 통신 불가능. 내부 네트워크끼리는 통신 가능

기본 게이트웨이의 IP 주소
- 라우터는 LAN쪽 주소/ WAN쪽 주소를 가지고 있다
- 하지만 LAN쪽 주소로 설정해야 함. 데이터는 같은 네트워크 내부의 전송이 기본.

라우팅이란?
- 라우터에서 데이터를 전송하는 과정

VRRP(virtual router redundancy protocol)
- 라우터를 여러개 두었을 경우(기본 게이트웨이가 여러개) 1개가 다운되면 다른곳을 기본게이트웨이로 사용할 수 있다.
- 하지만 기본적으로 PC는 라우터 다운을 감지 못함.
- VRRP를 이용하면 라우터가 다운됐을 때 자동으로 다른 라우터가 기본 게이트웨이 역활을 하도록 한다.

VRRP 작동 방법 간단
- 가상 라우터를 두고, 마스터와 백업을 골라서 사용하는 개념
- 마스터 라우터와 백업 라우터를 두고, 기존에는 마스터 라우터가 기본 게이트웨이이며, 다운되면 백업 라우터를 기본 게이트웨이로 쓰도록 한다.

DHCP(Dynamic Host Configuration Protocol)
- TCP/IP 설정을 하기엔 일반 유저들은 너무 어렵다.
(IP주소,서브넷 마스크 / 기본 게이트웨이 / DNS서버의 IP. 이 3개가 TCP/TP로 통신하기 위한 설정)
- 때문에 DHCP를 이용해 위 설정을 자동으로 해준다.
- 인터넷 설정에 "자동으로 IP주소 받기"가 DHCP를 사용하는 것.

DHCP의 작동 개념
- DHCP 서버는 OS나 라우터 내부에 내장되어 있다.
- 1) 클라가 DHCP 서버를 찾는다 (DHCP DISCOVER). 브로드 캐스트
- 2) DHCP 서버는 사용 가능한 IP를 응답한다 (DHCP OFFER)
- 3) 응답받은 IP를 사용하겠다고 DHCP 서버에 요청 (DHCP REQUEST)
- 4) DHCP 서버는 사용하라고 응답을 해준다. (DHCP ACK)

DHCP는 IP를 임대해주는 개념
- 때문에, DHCP 클라는 임대기간이 절반정도 남으면 자동으로 시간을 갱신한다(DHCP REQUEST)
- 더 이상 IP가 필요 없을 경우 IP를 반납한다 (DHCP RELEASE)

DHCP의 특이사항
- DHCP 서버는 클라에게 IP를 할당할때, 가능한 이전과 같은 IP를 할당한다.

통신 확인 명령어
- ipconfig : TCP/IP의 설정 확인
- ping : 지정한 대상에게 패킷을 보내본다. ICMP 에코 요청
- nslookup : DNS 서버 정상작동 체크
- tracert : 라우터 통신 경로 확인. TTL을 이용해 경융하는 라우터의 수 조사

스위치란?
- 같은 네트워크 내부에의 데이터 전송
- MAC주소 기반으로 데이터 전송
- 브로드밴드 기준, LAN포트가 스위치의 역활

MAC 주소란?
- 네트워크 장비에 부여된 고유한 주소. (LAN 포트의 주소)
- 어느 LAN 포트로 데이터를 전송할 지 판단하기 위함.
- 원칙적으로 변경 불가능.
- 라우터/스위치는 각각 LAN 포트마다 MAC주소가 존재

MAC주소 테이블
- MAC주소들이 저장되는 테이블. 스위치 내부에 존재.
- 포트 / MAC주소 컬럼으로 이루어져 있다고 봐도 된다.
- 최초 스위치를 ON했을때는 비어있으며, 해당 LAN포트로부터 데이터가 하나라도 올 시 추가된다.

MAC주소 테이블에 데이터 추가 예
- 1) 스위치의 1번포트와 연결된 PC A가 PC B로 데이터 송신
- 2) 데이터를 받은 스위치는 [1 / PC A의 MAC주소]라는 정보를 MAC주소 테이블에 추가. 1번 포트의 MAC 주소는 이제 PC A의 MAC주소가 됨.
- 3) 이제 목표인 PC B의 MAC주소를 테이블에서 찾는데 당연히 없다.
- 4) 아무도 없으니 데이터를, 자신과 연결된 모든 LAN 선으로 뿌린다.
- 5) 그리고 차후, 언젠가 PC B가 데이터를 보내면, 그 때 MAC 주소 테이블에 데이터가 추가된다. 즉, 테이블에는 스위치가 데이터를 수신받으면 그때 추가한다.

MAC주소 테이블의 장점
- 목표를 알고 있으면 매번 브로드캐스팅을 할 필요가 없다.

ARP란?
- IP주소에 매칭된 MAC주소를 알아내는 프로토콜
- 브로드 캐스트 사용
- 데이터 통신의 목적지가 같은 네트워크상에 존재하면, 스위치에서 한다.
- 목적지가 다른 네트워크면 라우터에서 한다.

ARP 테이블
- arp -a 명령어로 확인 가능
-  ARP로 얻은 MAC 주소를 일정 기간동안 저장한다.
- IP와 MAC주소를 맵핑해서 저장.
- L3 장비에 존재한다(PC와 라우터)

외부 네트워크가 목적지라면?
- PC 내부에서 나가기전에, ARP를 통해 기본 게이트웨이의 MAC주소를 알아온 후
- ARP 테이블에 캐싱해 두고
- 기본 게이트웨이로 데이터를 보낸다.

라우터란?
- 다른 네트워크와의 데이터 전송을 하는 네트워크 장치
- 라우팅이란 라우터에 의한 데이터 전송을 의미한다.

라우팅 테이블
- 데이터를 전송할 네트워크의 정보를 담고 있는 테이블.
- 라우터는 "목적지 IP"와 "라우팅 테이블"을 이용해 라우팅을 한다.
- 라우팅 테이블에 없는 목적지 IP로 가는 데이터는 파기된다.

디폴트 라우트
- 네트워크의 모든 정보가 라우팅 테이블에 저장될 수 없다. 
- 때문에 디폴트 라우트를 두어 사용한다. 
- 라우팅 테이블에 네트워크가 없을 경우 기본적으로 가야할 위치를 의미하는 듯 하다.

라우팅 테이블은 라우터+PC에도 존재
- route print를 하면 볼 수 있다.
- PC의 경우, 일단 인터넷으로 데이터가 가야 할 경우 디폴트 라우트에 의해 기본 게이트웨이로 간다.

라우터와 라우터 통신
- 인터넷에 존재하는 라우터와 라우터끼리도 결국에는 로컬 통신
- 라우터와 라우터 통신을 할 때는 MAC주소를 사용한다.

방화벽의 역활
- 데이터를 허가하거나, 파기함으로써 부정 연결을 방지.

암호화란?
- 암호키를 이용해 평문(일반 데이터)을 암호문으로 바꾸는 것.

복호화란?
- 암호키를 이용해 암호문을 평문(일반 데이터)으로 바꾸는 것.

암호화 알고리즘
- 암호문을 만드는 시스템.

대칭키 암호화 방식(공통키 암호화 방식)
- 암호/복호화에 동일한 암호키 사용.
- 장점 : 부하가 적고 빠른 처리 가능
- 단점 : 암호키가 동일하기 때문에, 암호키가 해킹당하면 암호화 의미가 사라짐.

공개키 암호화 방식 (비대칭키 암호화 방식)
- 암호/복호화에 서로 다른 암호키 사용
- 암호키 / 복호키를 페어로 만들어서, 1번 암호키로 인한 암호문은 1번 복호키로만 풀 수 있다.
- 장점 : 암호 키가 해킹당해도 안전. 복호키가 다르기 때문에. 암호키는 공개키로 사용된다.
- 단점 : 처리에 대한 부하가 있다. 암호/복호키가 다르기 때문에.

디지털 서명
- 데이터를 해쉬값으로 변경한 값을, 송신자의 비밀키로 암호화 한 것.

MD5, SHA 알고리즘
- 디지털 서명 시, 데이터를 해쉬값으로 변경하는 알고리즘.
- 해시값을 생성하는 알고리즘

디지털 서명을 이용한 암호화/복호화 절차
- 송신
- 1) 데이터를 MD5 등을 이용해 해쉬값으로 변경
- 2) 해쉬값을 [비밀키]로 암호화(이게 디지털 서명)
- 3) 디지털 서명과 실제 데이터를 송신

- 수신
- 1) 수신쪽에서는 디지털 서명을 [공개키]로 복호화
- 2) 그리고 데이터를 MD5등을 이용해 해쉬값으로 변경
- 3) 복호화한 디지털 서명과 데이터 해쉬값이 동일하면 데이터 변조가 일어나지 않은것.

인증서
- 디지털 서명을 이용한 암/복호화 시, 공개키가 진짜여야 하는데, 이 공개키가 진짜라는것을 보장해주는 것이 인증서.
- 어떤 특수한 기관에서 발행한 경우만 진짜 공개키로 허용

SSL
- 인증 기관이 발행한 인증서를 이용한 통신 방법

STL 비교자
- 크다면 true / 작다면 false 리턴 룰.


#pragma once
#ifndef __BINARY_TREE_H__
#define __BINARY_TREE_H__

////////////////////////
// 트리 도구 모음집.
////////////////////////

typedef int BTData;

////////////////////////////////////
// 이진트리 구조체
////////////////////////////////////
typedef struct _bTreeNode
{
	BTData m_data;
	struct _bTreeNode* m_Left;
	struct _bTreeNode* m_Right;

} BTreeNode;


////////////////////////////////////
// 이진트리 구조체 생성 함수
////////////////////////////////////
BTreeNode* MakeBTreeNode(void);

////////////////////////////////////
// 이진트리 구조체의 데이터 얻기 함수
////////////////////////////////////
BTData GetData(BTreeNode* bt);

////////////////////////////////////
// 이진트리 구조체의 데이터 변경 함수
////////////////////////////////////
void SetData(BTreeNode* bt, BTData data);

////////////////////////////////////
// 전달된 이진트리의, 왼쪽 서브트리의 루트노드를 얻는 함수
////////////////////////////////////
BTreeNode* GetLeftSubTree(BTreeNode* bt);

////////////////////////////////////
// 전달된 이진트리의, 오른쪽 서브트리의 루트노드를 얻는 함수
////////////////////////////////////
BTreeNode* GetRightSubTree(BTreeNode* bt);

////////////////////////////////////
// 왼쪽에 이진트리 연결 함수.
// main의 왼쪽에 sub 연결
////////////////////////////////////
void MakeLeftSubTree(BTreeNode* main, BTreeNode* sub);

////////////////////////////////////
// 오른쪽에 이진트리 연결 함수.
// main의 오른쪽에 sub 연결
////////////////////////////////////
void MakeRightSubTree(BTreeNode* main, BTreeNode* sub);

typedef void VisitFuncPtr(BTData data);

////////////////////////////////////
// 전위 순회 함수 (숫자 출력용. 연습)
void FirstTraverse(BTreeNode* bt, VisitFuncPtr action);
////////////////////////////////////

////////////////////////////////////
// 중위 순회 함수 (숫자 출력용. 연습)
////////////////////////////////////
void SecondTraverse(BTreeNode* bt, VisitFuncPtr action);

////////////////////////////////////
// 후위 순회 함수 (숫자 출력용. 연습)
////////////////////////////////////
void EndTraverse(BTreeNode* bt, VisitFuncPtr action);

////////////////////////////////////
// 트리 소멸 함수
// 전달된 루트 노드의 좌,우 모든 트리를 소멸시킨다.
// 중위 순회
////////////////////////////////////
void DeleteTree(BTreeNode* bt);



#endif // !__BINARY_TREE_H__


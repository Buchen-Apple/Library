#ifndef __RING_BUFF_H__
#define __RING_BUFF_H__

#include <windows.h>

namespace Library_Jingyu
{
	class CRingBuff
	{ 
	#define BUF_SIZE 8192

	private:
		char* m_Buff;
		int m_Front;
		int m_Rear;
		int m_BuffSize;

		//CRITICAL_SECTION cs;
		SRWLOCK	sl;

	private:
		// 초기화
		void Initial(int iBufferSize);


	public:

		//생성자.
		CRingBuff(void);
		CRingBuff(int iBufferSize);

		// 소멸자
		~CRingBuff();

		// 큐의 다음을 체크하기 위한 함수
		int NextIndex(int iIndex, int iSize);

		// 사이즈 다시 잡기
		void Resize(int size);

		// 버퍼 사이즈 얻기
		int	GetBufferSize(void);

		/////////////////////////////////////////////////////////////////////////
		// 현재 사용중인 용량 얻기.
		//
		// Parameters: 없음.
		// Return: (int)사용중인 용량.
		/////////////////////////////////////////////////////////////////////////
		int	GetUseSize(void);

		/////////////////////////////////////////////////////////////////////////
		// 현재 버퍼에 남은 용량 얻기.
		//
		// Parameters: 없음.
		// Return: (int)남은용량.
		/////////////////////////////////////////////////////////////////////////
		int	GetFreeSize(void);

		/////////////////////////////////////////////////////////////////////////
		// 버퍼 포인터로 외부에서 한방에 읽고, 쓸 수 있는 길이.
		// (끊기지 않은 길이)
		//
		// Parameters: 없음.
		// Return: (int)사용가능 용량.
		////////////////////////////////////////////////////////////////////////
		int	GetNotBrokenGetSize(void);
		int	GetNotBrokenPutSize(void);

		/////////////////////////////////////////////////////////////////////////
		// WritePos 에 데이타 넣음.
		//
		// Parameters: (char *)데이타 포인터. (int)크기. 
		// Return: (int)넣은 크기. 큐가 꽉 찼으면 -1
		/////////////////////////////////////////////////////////////////////////
		int	Enqueue(char *chpData, int iSize);

		/////////////////////////////////////////////////////////////////////////
		// ReadPos 에서 데이타 가져옴. ReadPos 이동.
		//
		// Parameters: (char *)데이타 포인터. (int)크기.
		// Return: (int)가져온 크기. 큐가 비었으면 -1
		/////////////////////////////////////////////////////////////////////////
		int	Dequeue(char *chpDest, int iSize);

		/////////////////////////////////////////////////////////////////////////
		// ReadPos 에서 데이타 읽어옴. ReadPos 고정.
		//
		// Parameters: (char *)데이타 포인터. (int)크기.
		// Return: (int)가져온 크기. 큐가 비었으면 -1
		/////////////////////////////////////////////////////////////////////////
		int	Peek(char *chpDest, int iSize);


		/////////////////////////////////////////////////////////////////////////
		// 원하는 길이만큼 읽기위치 에서 삭제 / 쓰기 위치 이동
		//
		// Parameters: 없음.
		// Return: 없음.
		/////////////////////////////////////////////////////////////////////////
		int RemoveData(int iSize);
		int	MoveWritePos(int iSize);

		/////////////////////////////////////////////////////////////////////////
		// 버퍼의 모든 데이타 삭제.
		//
		// Parameters: 없음.
		// Return: 없음.
		/////////////////////////////////////////////////////////////////////////
		void ClearBuffer(void);

		/////////////////////////////////////////////////////////////////////////
		// 링버퍼 뒤에가 끊겼을때, 0번인덱스부터 front까지의 길이
		//
		// Parameters: 없음.
		// Return: 0~front까지의 사이즈 리턴
		/////////////////////////////////////////////////////////////////////////
		int GetFrontSize(void);


		/////////////////////////////////////////////////////////////////////////
		// 버퍼의 포인터 얻음.
		//
		// Parameters: 없음.
		// Return: (char *) 버퍼 포인터.
		/////////////////////////////////////////////////////////////////////////
		char *GetBufferPtr(void);

		/////////////////////////////////////////////////////////////////////////
		// 버퍼의 ReadPos 포인터 얻음.
		//
		// Parameters: 없음.
		// Return: (char *) 버퍼 포인터.
		/////////////////////////////////////////////////////////////////////////
		char *GetReadBufferPtr(void);

		/////////////////////////////////////////////////////////////////////////
		// Fornt 1칸 앞 위치의 Buff 주소 반환
		//
		// Parameters: 없음.
		// Return: (char*)&Buff[m_Front 한칸앞]
		/////////////////////////////////////////////////////////////////////////
		char* GetFrontBufferPtr(void);

		/////////////////////////////////////////////////////////////////////////
		// 버퍼의 WritePos 포인터 얻음.
		//
		// Parameters: 없음.
		// Return: (char *) 버퍼 포인터.
		/////////////////////////////////////////////////////////////////////////
		char *GetWriteBufferPtr(void);

		/////////////////////////////////////////////////////////////////////////
		// Rear 1칸 앞 위치의 Buff 주소 반환
		//
		// Parameters: 없음.
		// Return: (char*)&Buff[m_Rear 한칸앞]
		/////////////////////////////////////////////////////////////////////////
		char* GetRearBufferPtr(void);

		/////////////////////////////////////////////////////////////////////////
		// 락 입장
		//
		// Parameters: 없음.
		// Return: 없음
		/////////////////////////////////////////////////////////////////////////
		void EnterLOCK();

		/////////////////////////////////////////////////////////////////////////
		// 락 퇴장
		//
		// Parameters: 없음.
		// Return: 없음
		/////////////////////////////////////////////////////////////////////////
		void LeaveLOCK();
	};
}

#endif // !__RING_BUFF_H__
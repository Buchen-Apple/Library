※ 기본 구조
- 리스트 형태의 락프리 스택 구조


※ 세부 구조
- 내부에서는 노드를 관리
: 노드는 [실제 data, 식별용code, next pointer] 총 3개의 변수로 이루어진다.
: 식별용 code는, 유저가 free로 반환한 데이터가 실제 내가 alloc한 데이터인지 확인 용도
: next Pointer로 다음 노드 위치 찾아간다.

- 최초 생성자에서 노드 수 지정 시, 해당 노드만큼 미리 동적할당
: 노드 수를 지정하지 않으면 필요할 때 동적할당

- 메모리풀에 Alloc 요청 시, 내부에 노드가 있으면 있는 노드 리턴
: 없을 경우 노드 사이즈만큼 malloc 후 리턴

- 메모리풀에 Free 요청 시, 받은 포인터가 내가 할당한 포인터인지 확인 후 내부 스택에 추가.


※ 구현 목표
- new/delete보다 빠른 속도로 동적할당, 동적해제
- 메모리 파편 최소화 (다만, 지정한 수 이상의 노드를 사용하기 위해서는 노드 1개씩 직접 malloc)
- new와 delete를 완전히 대체하기 위해 Thread safe 구조.



※ 구현 후 테스트
- new, delete, 메모리풀 Alloc, 메모리풀 Free를 1천만 회씩 100번 Loop (총 1억회)



※ 테스트 결과
1. new보다 메모리풀의 Alloc이 약 2배 빠름
2. delete보다 메모리풀의 free가 약 1.5배 빠름